<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="DRAW" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">if !instance_exists(PayloadCart) || !instance_exists(ControlPoint) exit;
xoffset = view_xview[0];
yoffset = view_yview[0];
xsize = view_wview[0];
ysize = view_hview[0];
xshift = -320*global.timerPos;
yshift = 5*global.timerPos;

drawx = xoffset+xsize/2 - floor(global.totalControlPoints-1)/2*60;

scalingFactor=450
xPos=240


draw_set_alpha(1);
//Draw the overall track
draw_sprite_ext(PayloadHudS,0,(xoffset+xsize/2)-xPos,yoffset+ysize-40,scalingFactor,3,0,c_white,1)
//Draw the track covered by the cart so far
draw_sprite_ext(PayloadHudS,1,(xoffset+xsize/2)-xPos,yoffset+ysize-40,cartPos*(scalingFactor),3,0,c_white,1)
//Draw the "Home" point
draw_sprite_ext(PayloadHudElementsS,2,(xoffset+xsize/2)-xPos,yoffset+ysize-40,3,3,0,c_white,1)
//Draw each control point status
for (i=1; i&lt;=global.totalControlPoints; i+=1)
{
var point;
point = global.cp[i];
draw_sprite_ext(PayloadHudElementsS,3+abs(point.team),(xoffset+xsize/2)-xPos+(distAdjust[i])*(scalingFactor),yoffset+ysize-40,3,3,0,c_white,1)
}
//Draw the cart
draw_sprite_ext(PayloadHudElementsS,0,(xoffset+xsize/2)-xPos+cartPos*(scalingFactor),yoffset+ysize-74,3,3,0,c_white,1)
draw_set_color(c_black)
draw_set_alpha(1)
draw_set_halign(fa_middle)
draw_set_valign(fa_center)
//Draw the cart's features
if global.winners == -1{
if PayloadCart.numPushers&gt;0{
//"People" symbol
draw_sprite_ext(PayloadHudElementsS,1,(xoffset+xsize/2)-xPos+cartPos*(scalingFactor),yoffset+ysize-74,3,3,0,c_white,1)
draw_text_transformed((xoffset+xsize/2)-xPos+cartPos*(scalingFactor)+12,yoffset+ysize-74-12,string(PayloadCart.numPushers),1.5,1.5,0)
}else if PayloadCart.alarm[0]&gt;0{
//Timer for moving back
draw_text_transformed((xoffset+xsize/2)-xPos+cartPos*(scalingFactor),yoffset+ysize-74-12,string(ceil(PayloadCart.alarm[0]/(30*global.delta_factor))),1.5,1.5,0)
}else if PayloadCart.speed&lt;0{
//Arrows when moving back
draw_sprite_ext(PayloadHudElementsS,5,(xoffset+xsize/2)-xPos+cartPos*(scalingFactor),yoffset+ysize-74,3,3,0,c_white,1)
}
if PayloadCart.blocked{
//Blocked symbols
draw_sprite_ext(PayloadHudElementsS,6+global.myself.team,(xoffset+xsize/2)-xPos+cartPos*(scalingFactor),yoffset+ysize-74,3,3,0,c_white,1)
}
}

draw_roundtimer(xoffset, yoffset, xsize, ysize, timer);
</argument>
      </arguments>
    </action>
  </actions>
</event>
