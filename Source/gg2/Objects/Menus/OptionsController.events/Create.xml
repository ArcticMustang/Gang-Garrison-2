<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="CREATE" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">{
    menu_create(self, 40, 140, 300, 30);
    
    if room != Options {
        menu_setdimmed(self);
    }
    
    oldName = global.playerName;
    valueoffset = 200;
    
    menu_addedit_text2(self, "Player name:", global.playerName, '
        global.playerName = string_copy(argument0, 0, min(string_length(argument0), MAX_PLAYERNAME_LENGTH));
        if string_count("#",global.playerName) &gt; 0 {
            show_message("Invalid character ' + "'\#'" + ' in name");
            global.playerName = "Player";
        }
        ini_open("gg2.ini");
        ini_write_string("Settings", "PlayerName", global.playerName);
        ini_close();
        if(room != Options and oldName != global.playerName)
        {
            write_ubyte(global.serverSocket, PLAYER_CHANGENAME);
            write_ubyte(global.serverSocket, string_length(global.playerName));
            write_string(global.serverSocket, global.playerName);
            socket_send(global.serverSocket);
        }
        oldName = global.playerName;
        return global.playerName;
    ');
    menu_addedit_boolean(self, "Fullscreen:", global.fullscreen, '
        global.fullscreen = argument0;
        ini_open("gg2.ini");
        ini_write_real("Settings", "Fullscreen", global.fullscreen);
        ini_close();
        window_set_fullscreen(global.fullscreen);
    ');
    menu_addedit_boolean(self, "Ingame Music:", global.ingameMusic, '
        global.ingameMusic = argument0;
        ini_open("gg2.ini");
        ini_write_real("Settings", "IngameMusic", global.ingameMusic);
        ini_close();
        if(global.ingameMusic) {
            if room != Options AudioControlPlaySong(global.IngameMusic, true);
        } else {
            if room != Options AudioControlPlaySong(-1, false);
        }
    ');
    
    var particles;
    
    if(global.particles == PARTICLES_NORMAL) {
        particles = "Normal";
    } else if(global.particles == PARTICLES_ALTERNATIVE) {
        particles = "Alternative (faster)";
    } else {
        particles = "Disabled";
    }
    
    menu_addedit_custom(self, "Particles:", particles, '
        global.particles = (global.particles+2) mod 3;
        ini_open("gg2.ini");
        ini_write_real("Settings", "Particles", global.particles);
        ini_close();
        if(global.particles == PARTICLES_NORMAL) {
            return "Normal";
        } else if(global.particles == PARTICLES_ALTERNATIVE) {
            return "Alternative (faster)";
        } else {
            return "Disabled";
        }
    ');
    
    var gibs;
    switch (global.gibLevel){
        case(0): gibs = "0, Disabled"; break;
        case(1): gibs = "1, Blood only"; break;
        case(2): gibs = "2, Blood and medium gibs"; break;
        default: gibs = string(global.gibLevel) + ", Full blood and gibs"; break;
    }
    
    menu_addedit_custom(self, "Gibs:", gibs, '
        switch (global.gibLevel){
            case(0): 
                global.gibLevel = 1;
                return "1, Blood only"; 
                break;
            case(1): 
                global.gibLevel = 2;
                return "2, Blood and medium gibs";
                break;
            case(2): 
                global.gibLevel = 3;
                return string(global.gibLevel) + ", Full blood and gibs";
                break;
            default: 
                global.gibLevel = 0;
                return "0, No blood or gibs";
                break;
                }
        ini_open("gg2.ini");
        ini_write_real("Settings", "Gib Level", global.gibLevel);
        ini_close();
    ');
    menu_addedit_boolean(self, "Healer Radar:", global.medicRadar, '
        global.medicRadar = argument0;
        ini_open("gg2.ini");
        ini_write_real("Settings", "Healer Radar", global.medicRadar);
        ini_close();
    ');
    menu_addedit_boolean(self, "Show Healer:", global.showHealer, '
        global.showHealer = argument0;
        ini_open("gg2.ini");
        ini_write_real("Settings", "Show Healer", global.showHealer);
        ini_close();
    ');
    menu_addedit_boolean(self, "Show Healing:", global.showHealing, '
        global.showHealing = argument0;    
        ini_open("gg2.ini");
        ini_write_real("Settings", "Show Healing", global.showHealing);
        ini_close();
    ');
    menu_addedit_boolean(self, "Additional Healthbar:", global.showHealthBar, '
        global.showHealthBar = argument0;
        ini_open("gg2.ini");
        ini_write_real("Settings", "Show Healthbar", global.showHealthBar);
        ini_close();
    ');
    menu_addedit_boolean(self, "Kill Cam:", global.killCam, '
        global.killCam = argument0;
        ini_open("gg2.ini");
        ini_write_real("Settings", "Kill Cam", global.killCam);
        ini_close();
    ');
    menu_addedit_boolean(self, "V Sync:", global.monitorSync, '
        global.monitorSync = argument0;
        ini_open("gg2.ini");
        ini_write_real("Settings", "Monitor Sync", global.monitorSync);
        ini_close();
        if(global.monitorSync == 0) {
            set_synchronization(false);
        } else {
            set_synchronization(true);
        }
    ');
    menu_addlink(self, "Controls", '
        instance_create(x,y,ControlsController);
        instance_destroy();
    ');
    menu_addlink(self, "HUD Options", '
        instance_create(x,y,HUDOptionsController);
        instance_destroy();
    ');
    menu_addlink(self, "Back", '
        event_user(13);
    ');
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
