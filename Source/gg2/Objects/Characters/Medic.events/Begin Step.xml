<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="1">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">if(!taunting and !omnomnomnom)
{
    if(!player.humiliated and (keyState | pressedKeys) &amp; $10)
        with(currentWeapon){
        if(!instance_exists(healTarget) and readyToShoot)
    {
        var bestTarget, bestTargetDist;
        bestTarget=noone;
        bestTargetDist=maxHealDistance;

        with(Character) {
            if(id != other.owner and team == other.owner.team &amp;&amp; cloakAlpha=1)
            ||(id != other.owner and disguiseTeam == other.owner.team &amp;&amp; player.class=CLASS_SPY &amp;&amp; disguised=true &amp;&amp; team!=other.owner.team &amp;&amp; cloakAlpha=1)   {
                if(point_distance(x,y,other.x,other.y)&lt;=bestTargetDist) {
                    if(collision_line(other.x, other.y,
                                      other.x+lengthdir_x(other.maxHealDistance, other.owner.aimDirection),
                                      other.y+lengthdir_y(other.maxHealDistance, other.owner.aimDirection), id, true, false))
                    {
                        if(!collision_line(other.x, other.y, x, y, Obstacle, true, true)) {
                            bestTargetDist = point_distance(x,y,other.x,other.y);
                            bestTarget = player;
                        }
                    }
                }
            }
        }

        healTarget = bestTarget;
        readyToShoot=false;
        alarm[0] = 1 / global.delta_factor;
    }
        }
        
}
</argument>
      </arguments>
    </action>
    <action id="604" library="1">
      <!--action name: Inherited-->
      <kind>NORMAL</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>false</canApplyTo>
      <actionType>FUNCTION</actionType>
      <functionName>action_inherited</functionName>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments/>
    </action>
  </actions>
</event>
